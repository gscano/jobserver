.TH JOBSERVER 7

.SH NAME

Jobserver - A set of functions to integrate a jobserver in a build automation
application compatible with
.UR https://www.gnu.org/software/make/
GNU Make
.UE

.SH DESCRIPTION

The purpose of the jobserver is to limit the number of
concurrent processes spawned by a program and its children,
and more specifically by a build automation software.

The first process initiates the jobserver with a maximum
number of parallel job tokens. To spawn a new child, the
jobserver locks an unused token if any is available. Otherwise,
it has to wait for one of its children to exit in order
to recycle the associated token. A child process will
search the environment to access the jobserver and try to
lock a token whenever it has to spawn a child, effectively
sharing the ability to do so with its siblings and parents.

.SS Header

.B #include <jobserver.h>

.B struct jobserver
.br
{
.in +0.5i
.br
.B bool \fIdry_run\fP;
.br
.B bool \fIdebug\fP;
.br
.B bool \fIkeep_going\fP;

.B pid_t \fIstopped\fP;
.br
.B int \fIstatus\fP;

.B ...
.br
.in
};

.B typedef int (*jobserver_callback_t)(void * \fIdata\fP);
.br
.B typedef void (*jobserver_callback_return_t) (void * \fIdata\fP, int \fIstatus\fP);

.B void jobserver_close_(struct jobserver * \fIjs\fP, bool \fIinherit\fP);

.B int jobserver_getenv_(int * \fIread_fd\fP, int * \fIwrite_fd\fP, bool * \fIdry_run\fP, bool * \fIdebug\fP, bool * \fIkeep_going\fP);
.br
.B int jobserver_setenv_(int \fIread_fd\fP, int \fIwrite_fd\fP, bool \fIdry_run\fP, bool \fIdebug\fP, bool \fIkeep_going\fP);

.SS Configuration

A jobserver, either created or joined, can have 3
properties related to the actions that should be
undertaken. Depending on the status of each flag, a
program using the jobserver:
.IP
* shall stop immediately when marked \fIdry_run\fP;
.IP
* print debug information when marked \fIdebug\fP;
.IP
* ignore errors (usually of children) as much as possible when marked \fIkeep_going\fP.

.SS Handling forks

Creating or connecting to a jobserver installs a signal handler for
\fBSIGCHLD\fP in order, when a child exits, to execute the
\fBjobserver_callback_return_t\fP callback and release the token
associated with the job.

Suppose the application using the jobserver spawned children without
calling \fBjobserver_launch_job\fP(3).

.IP
* If \fBSIGCHLD\fP is received while in a blocking function
such as \fBjobserver_launch_job\fP(3) or \fBjobserver_wait\fP(3)
the terminated process might not be a job. In this case,
\fB-1\fP is returned, \fIerrno\fP is set to \fBECHILD\fP, and
the \fIstopped\fP and \fIstatus\fP fields of the \fBjobserver\fP
structure receive the pid and the exit status of the stopped
process (as per \fBwaitpid\fP(2)).

.IP
* If the application waited for a child to exit (see \fBwait\fP(2)),
the waited process could be a jobserver job. In this case,
\fBjobserver_terminate_job\fP(3) \fImust be called\fP. Failure
to do so will cause the \fBjobserver_wait\fP(3) or
\fBjobserver_collect\fP(3) functions to \fBnever\fP return \fB0\fP.

.PP
It is important to note that when a fork happens outside of
\fBjobserver_launch_job\fP(3), the jobserver would be shared with
the new process, including the signal handler. You might want to
call \fBjobserver_close\fP(3) or \fBjobserver_close_\fP().

.SS Internal functions

.B void jobserver_close_(struct jobserver * \fIjs\fP, bool \fIinherit\fP);

.IP
The function \fBjobserver_close_\fP() can be called in a child when
forking manually in order to close jobserver \fIjs\fP in the child.
In particular, the function cleans up the \fIjs\fP data structure
and resets the signal handler for \fBSIGCHLD\fP to its default value.
If \fIinherit\fP is true, the jobserver remains available in the child
but a new local instance has to be created with \fBjobserver_connect\fP(3).
.PP

.B int jobserver_getenv_(int * \fIread_fd\fP, int * \fIwrite_fd\fP, bool * \fIdry_run\fP, bool * \fIdebug\fP, bool * \fIkeep_going\fP);

.IP
See \fBjobserver_getenv_\fP(3).
.PP

.B int jobserver_setenv_(int \fIread_fd\fP, int \fIwrite_fd\fP, bool \fIdry_run\fP, bool \fIdebug\fP, bool \fIkeep_going\fP);

.IP
See \fBjobserver_setenv_\fP(3).
.PP

.SH ENVIRONMENT

According to the GNU Make documentation the jobserver token pipe
is passed from one process to the other with the
.B MAKEFLAGS
environment variable.

Letters \(aqn\(aq, \(aqd\(aq, and \(aqk\(aq,
corresponding respectively to the \fIdry_run\fP, \fIdebug\fP, and \fIkeep_going\fP
options, are looked up or inserted in the first word of this variable.

The string
.B --jobserver-auth=
is followed by a pair, separated by a comma (\(aq,\(aq), of file descriptors
corresponding to the read and write sides of the token pipe.

.SH CONFORMING TO

.UR https://www.gnu.org/software/make/manual/html_node/Job-Slots.html#Job-Slots
Section 13.1
.UE
of the
.UR https://www.gnu.org/software/make/
GNU Make documentation
.UE .

.SH SEE ALSO

.BR jobserver_clear (3),
.BR jobserver_collect (3),
.BR jobserver_connect (3),
.BR jobserver_close (3),
.BR jobserver_create (3),
.BR jobserver_create_n (3),
.BR jobserver_launch_job (3),
.BR jobserver_print (3),
.BR jobserver_getenv (3),
.BR jobserver_setenv (3),
.BR jobserver_terminate_job (3),
.BR jobserver_unsetenv (3),
.BR jobserver_wait (3)
